@model Arquivo

@{
    var fp = Json.Encode(Model.FrequenciaPalavras);
}

<div class="col-md-12">
    <div class="card">
        <div class=".jqplot-meterGauge-label">
            <h4 class="title">Nuvem de Palavras do Documento</h4>
            <p class="category">Palavras maiores indicam uma frequência maior no texto.</p>
        </div>
        <div class="content">
            <div id="vis"></div>
        </div>
    </div>
</div>

<div class="clearfix"></div>

<script>
    // Busca as palavras e ocorrencias delas no texto
    var frequencia = @Html.Raw(fp);
    var tags = JSON.parse(frequencia, function(k, v) {
        if (k === "Palavra") 
            this.text = v;
        else if (k === "Frequencia")
            this.size = v;
        return v;
    });

    var fill = d3.scale.category20c();
    var w = 1035;
    var h = 366;
    var max, fontSize;

    var layout = d3.layout.cloud()
                    .timeInterval(Infinity)
                    .size([w, h])
                    .fontSize(function(d) {
                        return fontSize(+d.size);
                    })
                    .text(function(d) {
                        return d.text;
                    })
                    .on("end", draw);

    var svg = d3.select("#vis").append("svg")
            .attr("width", w)
            .attr("height", h);

    var vis = svg.append("g").attr("transform", "translate(0,0)");

    update();

    function draw(data, bounds) {
        svg.attr("width", w).attr("height", h);

        scale = bounds ? Math.min(
                w / Math.abs(bounds[1].x - w / 2),
                w / Math.abs(bounds[0].x - w / 2),
                h / Math.abs(bounds[1].y - h / 2),
                h / Math.abs(bounds[0].y - h / 2)) / 2 : 1;

        var text = vis.selectAll("text")
                .data(data, function(d) {
                    return d.text;
                });
			
        text.enter()
            .append("text")
            .attr("text-anchor", "middle")
                .attr("transform", function(d) {
                    return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                })
                .style("font-size", function(d) {
                    return d.size + "px";
                });
    
        text.style("font-family", 'Impact')
            .style("fill", function(d) { return fill(d.text); })
            .text(function(d) { return d.text; });

        vis.transition().attr("transform", "translate(" + [w >> 1, h >> 1] + ")");//scale(" + scale + ")");
    }

    function update() {
        layout.font('impact').spiral('archimedean');
        fontSize = d3.scale['sqrt']().range([10, 100]);
        if (tags.length){
            fontSize.domain([+tags[tags.length - 1].size || 1, +tags[0].size]);
        }
        layout.stop().words(tags).start();
    }

    
</script>