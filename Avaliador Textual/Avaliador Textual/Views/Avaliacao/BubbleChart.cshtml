@model Arquivo

@{
    var fp = Json.Encode(Model.FrequenciaPalavras);
}

<div class="col-md-6">
    <div class="card">
        <div class=".jqplot-meterGauge-label">
            <h4 class="title">Gráfico de Bolhas de Palavras do Documento</h4>
            <p class="category">Bolhas maiores indicam uma frequência maior no texto.</p>
            <p class="category">Origem: Documento informado.</p>
        </div>
        <div class="content">
            <section id="bubbleGraph" width="97%"></section>
        </div>
    </div>
</div>

<script>
    // Busca as palavras e ocorrencias delas no texto
    var frequencia = @Html.Raw(fp);

    // Descobre o maior valor do
    var max = Math.max.apply(Math, JSON.parse(frequencia).map(function(o){return o.Frequencia;}));
    
    var jsonObj = JSON.parse(frequencia, function(k, v) {
        if (k === "Palavra") 
            this.name = v;
        else if (k === "Frequencia")
            this.size = v;
        return v;
    })
    .filter(function (d){
        // Frequencia minima corresponde a 5% do maior valor
        var freqMinima = Math.round(max * 5 / 100);
        return (d.Frequencia > freqMinima);
    });

    var root = d3.nest()
                    .key(function(d){return d.name;})
                    .rollup(function(v) { return d3.sum(v, function(d) { return d.size; }); })
                    .entries(jsonObj);

    var myData = {name:'flare', children:[]}; //this will be root 
    root.forEach(function(palavra) {
        var dis = {};
        dis.name    = palavra.key;
        dis.size    = palavra.values;
        myData.children.push(dis);
    });
    root = myData;
    
    var color = d3.scale.category20c();
    var w = 500, h = 500, format = d3.format(",d");
    
    var bubble = d3.layout.pack()
          .sort(function(a, b) {
              return -(a.value - b.value);
          })
          .size([w, h])
          .padding(1.5);

    var svg = d3.select("#bubbleGraph").append("svg")
          .attr("width", w)
          .attr("height", h)
          .attr("class", "bubble");

    var node = svg.selectAll(".node")
        .data(bubble.nodes(classes(root))
        .filter(function(d) { return !d.children;}))
      .enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

    node.append("title")
            .text(function(d) { return d.className + ": " + format(d.value); });

    node.append("circle")
            .attr("r", function(d) { return d.r; })
            .style("fill", function(d) { return color(d.value); });

    node.append("text")
            .attr("dy", ".5em")
            .style("text-anchor", "middle")
            .text(function(d) { return d.className.substring(0, d.r / 3); });

    // Returns a flattened hierarchy containing all leaf nodes under the root.
    function classes(root) {
        var classes = [];

        function recurse(name, node) {
            if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
            else classes.push({packageName: name, className: node.name, value: node.size});
        }

        recurse(null, root);
        return {children: classes};
    }

    d3.select(self.frameElement).style("height", h + "px");
</script>